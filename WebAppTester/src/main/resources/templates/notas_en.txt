
#WebAppTester: Tester for online forms
#This program uses Selenium to open a web browser and run user written commands.
#Download Selenium controllers for your favorite browser (check your browser version)
#from https://www.selenium.dev/downloads/ and save it in the same folder with the program.
#Every line starting with #, is ignored.
#This program builds a tree the folder "scripts" and subfolders.
#The tree is composed of folders and actions in every txt file.
#If there is a file _start.txt, that file will be read and executed before proceeding to any other action in that folder.
#If there is a file _end.txt, that file will be read and executed after any other action in that folder.
#
#Folder Tree Examples
#[scripts]
#scripts/_start.txt
#scripts/_end.txt
#[scripts/management]
#scripts/management/_start.txt
#scripts/management/crearpregunta.txt
#scripts/management/listarpreguntas.txt
#
#If you request the execution of the command "scripts/management/listarpreguntas", the program will run these 
#commands in order:
#scripts/_start.txt
#scripts/management/_start.txt
#scripts/management/listarpreguntas.txt
#scripts/_end.txt
#
#The files _start.txt and _end.txt are not mandatory: they are justa a way to automate actions as authentication
#prior to work with a page or execute a logout after using a given page
#
#Every action is a set of instructions to be executed by your web browser.
#each instruction has the format "action={command}"
#[Supported actions]
#Uncomment examples below to activate them
#go - Opens a web page. 
#Example:
#go={https://duckduckgo.com/}
#wait - Waits for a page to be completely loaded after a change in the location bar URL, or after clicking any element.
#The browser will wait until a given object (given its selector), appear or simply the page to be fully loaded
#Params:
# - selector : The selector of the object to wait for. Could be a css or xpath selector
# - type  (Optional): The type of the selector to be used: "css/xpath". If missing, css will be used
#Examples:
#wait={}
#wait={
#  "selector":"#duckbar"
#}
#wait={
#  "selector":"//*[@id="search_form_input_homepage"]",
#  "type":"xpath"
#}
#write - Writes text in a page component given its css selector.
#Params:
#-selector: the css selector of the component to write on
#-text: the text to write
#-type (Optional): The type of the selector to be used: "css/xpath". If missing, css will be used
#Examples:
#write={
# "selector":"#search_form_input_homepage",
# "text":"inicio"
#}
#write={
# "selector":"#search_form_input_homepage",
# "text":"inicio"
#  "type":"css"
#}
#You can specify special commands (ALT, F1,ENTER, ESCAPE, etc)
#using this format:
#[%Keys.CONTROL]
#The full list of supported constants can be found in https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/Keys.html
#If you need to send command combinations, you can write using this format:
#[%Keys.CONTROL,Keys.ALT]
#You can also add non-commands characters, like this:
#[%Keys.CONTROL,Keys.ALT]r
#Example:
#write={
# "selector":"#search_form_input_homepage",
# "text":"[%Keys.CONTROL,Keys.ALT]r"
#}
#If you need to write the text "[%", instead write "[%%"
#
#click - Clicks a component of the page given a css selector
#Params:
 #- selector (optional): The selector of the object to click. Could be a css or xpath selector
# - type (optional): The type of the selector to be used: "css/xpath". If missing, css will be used
#If no selector provided, the click event is triggered wherever the mouse pointer is located.
#Example:
#click={ 
#  "selector":"#search_button_homepage"
#}
#double click - Double-clicks any element in the page, given its selector.
#Params:
# - selector (optional): The selector of the object to double click. Could be a css or xpath selector
# - type (optional): The type of the selector to be used: "css/xpath". If missing, css will be used
#If no selector provided, the double click event is triggered wherever the mouse pointer is located.
#
#Example:
#double click={
#    "selector": "/html/body",
#    "type" : "xpath"
#}
#right click - Right clicks any element in the page, given its selector.
#Params:
# - selector (optional): The selector of the object to right click. Could be a css or xpath selector
# - type (optional): The type of the selector to be used: "css/xpath". If missing, css will be used
#If no selector provided, the right click event is triggered wherever the mouse pointer is located.
#Example:
#right click={
#    "selector": "#Identificacion"
#}
#
#### place mouse pointer - Place the mouse pointer in screen
#Params:
 #- offsetType (optional): One of these:
#    FROM_UL_CORNER (default)- To place the mouse pointer relative to the upper left corner
#    FROM_CUR_LOCATION - To place the mouse pointer from its current location
#    FROM_CNTR_OBJECT - To place the mouse pointer from the center of a given object
 #- x: the horizontal pixels to move the mouse pointer
 #- y: the vertical pixels to move the mouse pointer
# -selector: the selector for the object (use only with FROM_CNTR_OBJECT)
# -type: Type of the selector for the object (default = CSS)
#Examples:

#place mouse pointer={
#    "offsetType":"FROM_UL_CORNER",
#    "x":"150",
#    "y":"350"
#}

#place mouse pointer={
#    "offsetType":"FROM_CNTR_OBJECT",
#    "x":"150",
#    "y":"350",
#    "selector":"img:nth-of-type(2)"
#}
#
#scroll - Scrolls the screen horizantally (x) or vertically (y)
# a given amount of pixels.
#Params:
# - selector (optional): The selector of the object to scroll on. Could be a css or xpath selector. If missing, the whole page will be selected (body)
# - type (optional): The type of the selector to be used: "css/xpath". If missing, css will be used
# - x : pixels to scroll in horizontal axis (>0 right, <0 left)
# - y : pixels to scroll in vertical axis (>0 down, <0 up)
#Examples:
#
#scroll={
#   "x":"0",
#   "y":"100"
#}
#
#scroll={
#   "x":"10",
#   "y":"-100"
#}
#
#scroll={
#   "x":"10",
#   "y":"-100",
#   "selector":"//*[@id='main-content-inner']",
#   "type": "xpath"
#}
#
#pause - Waits a given time, before proceeding with the next instruction.
#Params:
# - time: NUMBER UNITS, Where UNITS can be one of these values: S=milliseconds,s=seconds, m=minutes, h=hours, d=days
#Example:
#To wait three seconds
#pause={"time":"3 s"}
#To wait 10 minutes
#pause={"time":"10 m"}
#
#pick choice - Prompts user to pick a single choice among a list, stores selected
#option in a variable.
#Params:
#- selector: Required. This selector must match to a collection of HTML elements</ol>
#- subselector: Secondary css path, to specify the element of every option to be shown. 
# - type (optional): The type of the selector and subselector to be used: "css/xpath". If missing, css will be used
# to the user. By default, the text of every element gathered with the "selector" 
# will be used as option.
#- variable: Required. Name of the variable used to store user's selection.
#- title: Title for the promtpt window
#- message: Message to use in the prompt window.
#- sorted: Sort options alphabetically? (yes/no)
#
#Example:
#pick choice={
# "selector":"div.central-featured-lang",
# "subselector": "a",
# "sorted":"yes",
# "title":"Wikipedia",
# "message":"Select a language",
# "variable":"Language"
#}
#
#Set variable - A handy way to assign text to a name.
#Params:
#- name : Name of the variable. Allowed characters in the name: numbers, letters and the signs _ -. e.g.: "MY_KEY","comment-02"
#- value : The text inside it
#
#Example:
#set={"name":"comment","value":"I like this"}
#
#Set browser: Use to change between these browsers:
# - CHROME,
# - EDGE,
# - FIREFOX,
# - INTERNET_EXPLORER,
# - OPERA,
# - SAFARI
#Example:
#browser={SAFARI}
#
# Note: When a new browser is set, the default page will be loaded and all authentication data will be lost
#
#Variables
#
#Use existing variables inside your instructions writing the variable's name between square brackets
#like this: [:VARIABLE_NAME]
#
#Example:
#
#click={
# "selector":"[:Language] > a"
#}
#
#Passwords
#If you want to store encripted passwords in your scripts, so that nobody else can read them (typically usernames &
#passwords to enter in secured sites), encrypt your word with the button "Crypt password" and write the password in your 
#script file using this sintax:
#[$YOUR_ENCRIPTED_PASSWORD]
#If you need to write the text "[$", write "[$$" instead.
#Keep in mind: the hash used for each password is unique per computer
#Example:
#
#Example:
#```
#write={
 #"selector":"input[type='search']",
   #This encripted password won't be decrypted in your machine
#  "text":"[$QTUgOMDYfXZ4gEjZ7BTYpw==]"
#}
#
#known Issues:
#- Selectors won't work inside an IFRAME element.
#
# About CSS/XPATH Selectors: 
# https://www.w3.org/wiki/CSS/Selectors
# https://www.w3schools.com/cssref/css_selectors.asp
# https://www.w3schools.com/xml/xpath_syntax.asp
# https://docs.scrapy.org/en/latest/topics/selectors.html